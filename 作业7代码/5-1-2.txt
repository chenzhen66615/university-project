#include<stdio.h>
#include<curses.h>
#include<signal.h>
#include<stdlib.h>
#include<string.h>
#include<fcntl.h>
#include<sys/time.h>

#define BLANK "                    "

char words[10][20]={"a","b","cool","fantastic","negligible","comfortable","active","energetic","humurous","encounter"};
//char word[16]={'H','n','s','M','a','E','A','D','d','m','h','N','S','o','e','O'};//handsome HANDSOME
int row=10;
int col=30;
int delay=2000;
int score=0;
int ri=0;
int done=0;

void on_alarm();
void on_input();
void enable_kbd_signals();
void leave();

int main()
{
	int c;
	
	initscr();
	crmode();
	noecho();
	clear();

	signal(SIGIO,on_input);
	enable_kbd_signals();
	signal(SIGALRM,on_alarm);
	set_ticker(delay);

	mvaddstr(row,col,words[ri]);
	mvaddstr(LINES-1,0,"score:");//display score
	move(LINES-1,COLS-1);
	refresh();
	
	while(!done){
		pause();
	}
	//leave();
	return 0;
}

void leave()
{
	signal(SIGALRM,SIG_IGN);
	signal(SIGIO,SIG_IGN);
	endwin();
	printf("You input 'quit'!\n");
	printf("You get %d scores!\n",score);//display results
	//exit(0);
}

void enable_kbd_signals()
{
	int fd_flags;
	fcntl(0,F_SETOWN,getpid());//notify OS
	fd_flags=fcntl(0,F_GETFL);
	fcntl(0,F_SETFL,(fd_flags|O_ASYNC));//open input signal
}
	
void on_alarm()
{
	signal(SIGALRM,on_alarm);
	mvaddstr(row,col,BLANK);
	ri=rand()%10;//random get index
	row=rand()%LINES;//random row
	col=rand()%(COLS-20);//random col
	srand((unsigned int)time(NULL));//set the seeds
	mvaddstr(row,col,words[ri]);//display the character
	
	move(LINES-1,COLS-1);//park the cursor
	refresh();
}

void on_input()
{
	char c[20];
	scanf("%s",c);
	if(strcmp(c,"quit")==0){
		done=1;
		leave();//exit program
	}
	else if(strcmp(c,words[ri])==0){//input is right
		score++;
		
		mvprintw(LINES-1,7,"%d",score);
		move(LINES-1,COLS-1);
	}
	else
		beep();//bee..
}

set_ticker( n_msecs )
{
        struct itimerval new_timeset;
        long    n_sec, n_usecs;

        n_sec = n_msecs / 1000 ;
        n_usecs = ( n_msecs % 1000 ) * 1000L ;

        new_timeset.it_interval.tv_sec  = n_sec;        /* set reload  */
        new_timeset.it_interval.tv_usec = n_usecs;      /* new ticker value */
        new_timeset.it_value.tv_sec     = n_sec  ;      /* store this   */
        new_timeset.it_value.tv_usec    = n_usecs ;     /* and this     */

	return setitimer(ITIMER_REAL, &new_timeset, NULL);
}